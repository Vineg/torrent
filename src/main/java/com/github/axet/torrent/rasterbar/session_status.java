package com.github.axet.torrent.rasterbar;
import java.util.Arrays;
import java.util.List;

import com.sun.jna.Structure;
/**
 * <i>native declaration : c/libtorrent.h:220</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class session_status extends Structure {
	public int has_incoming_connections;
	public float upload_rate;
	public float download_rate;
	public long total_download;
	public long total_upload;
	public float payload_upload_rate;
	public float payload_download_rate;
	public long total_payload_download;
	public long total_payload_upload;
	public float ip_overhead_upload_rate;
	public float ip_overhead_download_rate;
	public long total_ip_overhead_download;
	public long total_ip_overhead_upload;
	public float dht_upload_rate;
	public float dht_download_rate;
	public long total_dht_download;
	public long total_dht_upload;
	public float tracker_upload_rate;
	public float tracker_download_rate;
	public long total_tracker_download;
	public long total_tracker_upload;
	public long total_redundant_bytes;
	public long total_failed_bytes;
	public int num_peers;
	public int num_unchoked;
	public int allowed_upload_slots;
	public int up_bandwidth_queue;
	public int down_bandwidth_queue;
	public int up_bandwidth_bytes_queue;
	public int down_bandwidth_bytes_queue;
	public int optimistic_unchoke_counter;
	public int unchoke_counter;
	public int dht_nodes;
	public int dht_node_cache;
	public int dht_torrents;
	public long dht_global_nodes;
	public session_status() {
		super();
	}
    @Override
    protected List getFieldOrder() {
        return Arrays.asList(new String[]{"has_incoming_connections", "upload_rate", "download_rate", "total_download", "total_upload", "payload_upload_rate", "payload_download_rate", "total_payload_download", "total_payload_upload", "ip_overhead_upload_rate", "ip_overhead_download_rate", "total_ip_overhead_download", "total_ip_overhead_upload", "dht_upload_rate", "dht_download_rate", "total_dht_download", "total_dht_upload", "tracker_upload_rate", "tracker_download_rate", "total_tracker_download", "total_tracker_upload", "total_redundant_bytes", "total_failed_bytes", "num_peers", "num_unchoked", "allowed_upload_slots", "up_bandwidth_queue", "down_bandwidth_queue", "up_bandwidth_bytes_queue", "down_bandwidth_bytes_queue", "optimistic_unchoke_counter", "unchoke_counter", "dht_nodes", "dht_node_cache", "dht_torrents", "dht_global_nodes"});
	}
	public static class ByReference extends session_status implements Structure.ByReference {
		
	};
	public static class ByValue extends session_status implements Structure.ByValue {
		
	};
}
